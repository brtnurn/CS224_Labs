CS224
Lab 7
Section 6
Bertan Uran
22102541
05/05/2024

CS224
Lab 7
Section 6
Merve Güleç
22103231
05/05/2024

Part a)

SFRs for the I/O device(s) involved in Part2-b:

PORTC: indicates in which direction the DC motor will turn
PORTE: indicates which button is pushed
TRISC: determines PORTC as an output
TRISE: determines PORTE as an input

Part b)

void main() {
    AD1PCFG = 0xFFFF; // Configure
    DDPCON.JTAGEN = 0; // disable JTAG
    TRISC = 0x0000; //makes PORTC output (DC motor)
    TRISE = 0xFFFF; // makes PORTE input (push buttons)
    while(1) {
        if(PORTEbits.RE0 == 1 && PORTEbits.RE1 == 0) { //if button0 is pushed and button1 is not pushed
            PORTCbits.RC0 = 1;  //start turning DC motor clockwise...
            PORTCbits.RC1 = 0;
            Delay_ms(1000);     //...for 1 second
            PORTCbits.RC0 = 0;  //stop the DC motor after 1 sec
        }
        else if(PORTEbits.RE0 == 0 && PORTEbits.RE1 == 1) { //button1 is pushed and button0 is not pushed
            PORTCbits.RC0 = 0;
            PORTCbits.RC1 = 1;  //start turning DC motor counter clockwise...
            Delay_ms(1000);     //...for 1 sec
            PORTCbits.RC1 = 0;  //stop the DC motor after 1 sec
        }
        else {
            PORTCbits.RC0 = 0;  //if none or both of the buttons are pushed, do nothing
            PORTCbits.RC1 = 0;
        }
    }
}

Pard c)

SFRs for the I/O device(s) involved in Part2-c:

PORTA: indicates the value that is shown in 7-seg display
PORTE: indicates in which digit of 7-seg the data in PORTA is displayed
TRISA: determines PORTA as an output to D
TRISE: determines PORTE as an output to AN

Part d)

// Hexadecimal values for digits in 7 segment
unsigned char binary_pattern[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};

void main() {
    AD1PCFG = 0xFFFF;      // Configure AN pins as digital I/O
    JTAGEN_bit = 0;        // Disable JTAG
    TRISA = 0x00;  //portA is output to D
    TRISE = 0X00;  //portE is output to AN
    int first = 1;
    int second = 1;
    while(1) {
        int cur = first;
        cur = cur % 10000; //prevents overflow
        for(int i = 0; i < second * 25; i++) { //wait next fibonacci number * 100 ms before showing it
            // Digit 1
            PORTA=binary_pattern[cur % 10]; //gets last digit of the fibonacci number
            PORTE=0x01;
            Delay_ms(1); //make 7-seg look like it shows all digits simultaneously

            // Digit 2
            PORTA=binary_pattern[cur / 10 % 10]; //gets third digit of the fibonacci number
            PORTE=0x02;
            Delay_ms(1);

            // Digit 3
            PORTA=binary_pattern[cur / 100 % 10]; //gets second digit of the fibonacci number
            PORTE=0x04;
            Delay_ms(1);

            // Digit 4
            PORTA=binary_pattern[cur / 1000 % 10]; //gets first digit of the fibonacci number
            PORTE=0x08;
            Delay_ms(1);
        }
        int next = first + second; //calculates next fibonacci number
        first = second;
        second = next;
    }
}//main